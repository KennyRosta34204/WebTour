import os
import time
from datetime import datetime
import json
import hashlib
import hmac
import random
import re
from flask import Flask, request, jsonify
from flask_cors import CORS
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv
import requests
import bcrypt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import google.generativeai as genai

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

app = Flask(__name__)
CORS(app)  # K√≠ch ho·∫°t CORS

# C·∫•u h√¨nh Google Generative AI (Gemini 1.5 Pro)
API_KEY = 'AIzaSyASM1P-ryTTp8s6Mr_Cz8NtnMGobeVvMr8'  # Thay th·∫ø b·∫±ng API key h·ª£p l·ªá c·ªßa b·∫°n
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro')
chat = model.start_chat(history=[])

# H√†m ghi log v·ªõi timestamp
def log_with_timestamp(message, data=None):
    timestamp = datetime.now().isoformat()
    print(f"[{timestamp}] {message}", json.dumps(data, indent=2) if data else '')

# H√†m ghi log l·ªói
def log_error(message, error):
    timestamp = datetime.now().isoformat()
    print(f"[{timestamp}] ERROR: {message}", {
        'message': str(error),
        'stack': getattr(error, 'stack', None),
        'response': getattr(error, 'response', None)
    })

# C·∫•u h√¨nh ZaloPay
config = {
    'app_id': os.getenv('ZALOPAY_APP_ID', '2554'),
    'key1': os.getenv('ZALOPAY_KEY1', 'sdngKKJmqEMzvh5QQcdD2A9XBSKUNaYn'),
    'key2': os.getenv('ZALOPAY_KEY2', 'trMrHtvjo6myautxF8KioRpXuW6Gxuna'),
    'endpoint': os.getenv('ZALOPAY_ENDPOINT', 'https://sb-openapi.zalopay.vn/v2/create'),
}

log_with_timestamp("üöÄ ZaloPay Config Loaded:", {
    'app_id': config['app_id'],
    'endpoint': config['endpoint'],
    'has_key1': bool(config['key1']),
    'has_key2': bool(config['key2'])
})

# Ki·ªÉm tra config ZaloPay
if not all([config['app_id'], config['key1'], config['key2'], config['endpoint']]):
    log_error("Thi·∫øu th√¥ng tin c·∫•u h√¨nh ZaloPay", Exception("Missing ZaloPay config"))
    exit(1)

# C·∫•u h√¨nh k·∫øt n·ªëi MySQL
db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': '',
    'database': 'aitour',
    'pool_size': 10
}

# T·∫°o pool k·∫øt n·ªëi MySQL
connection_pool = mysql.connector.pooling.MySQLConnectionPool(**db_config)

# Ki·ªÉm tra k·∫øt n·ªëi MySQL v√† database ƒëang s·ª≠ d·ª•ng
def check_mysql_connection():
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT DATABASE() as db")
        result = cursor.fetchone()
        log_with_timestamp("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng, database ƒëang s·ª≠ d·ª•ng:", result[0])
        
        # Ki·ªÉm tra v√† th√™m c√°c c·ªôt m·ªõi v√†o b·∫£ng product n·∫øu ch∆∞a t·ªìn t·∫°i
        cursor.execute("SHOW COLUMNS FROM product")
        columns = [col[0] for col in cursor.fetchall()]
        
        if 'url' not in columns:
            cursor.execute("ALTER TABLE product ADD COLUMN url VARCHAR(255)")
            log_with_timestamp("‚úÖ ƒê√£ th√™m c·ªôt 'url' v√†o b·∫£ng product")
        if 'hotel' not in columns:
            cursor.execute("ALTER TABLE product ADD COLUMN hotel VARCHAR(255)")
            log_with_timestamp("‚úÖ ƒê√£ th√™m c·ªôt 'hotel' v√†o b·∫£ng product")
        if 'transport' not in columns:
            cursor.execute("ALTER TABLE product ADD COLUMN transport VARCHAR(255)")
            log_with_timestamp("‚úÖ ƒê√£ th√™m c·ªôt 'transport' v√†o b·∫£ng product")
        
        cursor.close()
        connection.close()
    except Error as e:
        log_error("‚ùå L·ªói k·∫øt n·ªëi MySQL ho·∫∑c c·∫≠p nh·∫≠t b·∫£ng:", e)
        exit(1)

check_mysql_connection()

# C·∫•u h√¨nh g·ª≠i email
EMAIL_USER = os.getenv('EMAIL_USER')
EMAIL_PASS = os.getenv('EMAIL_PASS')

def send_email(to_email, subject, html_content):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_USER
        msg['To'] = to_email
        msg['Subject'] = subject
        msg.attach(MIMEText(html_content, 'html'))
        
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASS)
        server.sendmail(EMAIL_USER, to_email, msg.as_string())
        server.quit()
        log_with_timestamp("‚úÖ ƒê√£ g·ª≠i email th√†nh c√¥ng:", {'to': to_email})
    except Exception as e:
        log_error("‚ùå L·ªói khi g·ª≠i email:", e)
        raise

# H√†m t·∫°o app_trans_id
def generate_trans_id():
    now = datetime.now()
    year = str(now.year)[-2:]
    month = str(now.month).zfill(2)
    day = str(now.day).zfill(2)
    timestamp = str(int(time.time() * 1000))[-6:]
    return f"{year}{month}{day}_{timestamp}"

# H√†m t·∫°o user_id
def generate_user_id():
    timestamp = str(int(time.time() * 1000))
    random_num = str(random.randint(0, 999)).zfill(3)
    return f"{timestamp}{random_num}"

# H√†m t·∫°o m√£ x√°c nh·∫≠n (6 ch·ªØ s·ªë)
def generate_verification_code():
    return str(random.randint(100000, 999999))

# API ƒëƒÉng k√Ω
@app.route('/auth/register', methods=['POST'])
def register():
    connection = None
    try:
        connection = connection_pool.get_connection()
        connection.start_transaction()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        username = data.get('username')
        email = data.get('email')
        phone = data.get('phone')
        password = data.get('password')
        confirm_password = data.get('confirm_password')

        if not all([username, email, phone, password, confirm_password]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin:", data)
            return jsonify({'status': 'error', 'message': 'T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc'}), 400

        if password != confirm_password:
            return jsonify({'status': 'error', 'message': 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp'}), 400

        email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
        if not re.match(email_regex, email):
            log_with_timestamp("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá:", {'email': email})
            return jsonify({'status': 'error', 'message': 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá'}), 400

        phone_regex = r'^\d{10,15}$'
        if not re.match(phone_regex, phone):
            log_with_timestamp("‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá:", {'phone': phone})
            return jsonify({'status': 'error', 'message': 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i c√≥ 10-15 ch·ªØ s·ªë)'}), 400

        cursor.execute('SELECT * FROM users WHERE username = %s OR email = %s', (username, email))
        if cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i:", {'username': username, 'email': email})
            return jsonify({'status': 'error', 'message': 'Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i'}), 400

        user_id = generate_user_id()
        log_with_timestamp("üîç T·∫°o user_id m·ªõi:", {'user_id': user_id})

        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Th√™m v√†o b·∫£ng users
        cursor.execute(
            'INSERT INTO users (user_id, username, email, phone, password) VALUES (%s, %s, %s, %s, %s)',
            (user_id, username, email, phone, hashed_password)
        )

        # Th√™m v√†o b·∫£ng user
        cursor.execute(
            'INSERT INTO user (name, email, phone, username, password) VALUES (%s, %s, %s, %s, %s)',
            (username, email, phone, username, hashed_password)
        )
        user_table_id = cursor.lastrowid
        log_with_timestamp("‚úÖ Th√™m v√†o b·∫£ng user:", {'id': user_table_id, 'email': email})

        connection.commit()
        log_with_timestamp("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:", {'user_id': user_id, 'username': username})
        return jsonify({'status': 'success', 'message': 'ƒêƒÉng k√Ω th√†nh c√¥ng'}), 201

    except Exception as e:
        log_error("‚ùå L·ªói khi ƒëƒÉng k√Ω:", e)
        if connection:
            connection.rollback()
        return jsonify({'status': 'error', 'message': f'ƒêƒÉng k√Ω th·∫•t b·∫°i: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API ƒëƒÉng nh·∫≠p
@app.route('/auth/login', methods=['POST'])
def login():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        username = data.get('username')
        password = data.get('password')

        if not all([username, password]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin:", {'username': username})
            return jsonify({'status': 'error', 'message': 'T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc'}), 400

        cursor.execute('SELECT * FROM users WHERE username = %s', (username,))
        user = cursor.fetchone()

        if not user:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user:", {'username': username})
            return jsonify({'status': 'error', 'message': 'Username ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'}), 400

        if not bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
            log_with_timestamp("‚ö†Ô∏è M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng:", {'username': username})
            return jsonify({'status': 'error', 'message': 'Username ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'}), 400

        cursor.execute('SELECT * FROM user WHERE email = %s', (user['email'],))
        user_table_row = cursor.fetchone()
        if not user_table_row:
            cursor.execute(
                'INSERT INTO user (name, email, phone, username, password) VALUES (%s, %s, %s, %s, %s)',
                (user['username'], user['email'], user['phone'], user['username'], user['password'])
            )
            user_table_id = cursor.lastrowid
            log_with_timestamp("‚úÖ Th√™m v√†o b·∫£ng user:", {'id': user_table_id, 'email': user['email']})
        else:
            user_table_id = user_table_row['id']
            log_with_timestamp("‚úÖ ƒê√£ t·ªìn t·∫°i trong b·∫£ng user:", {'id': user_table_id, 'email': user['email']})

        log_with_timestamp("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", {'username': username})
        return jsonify({
            'status': 'success',
            'message': 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            'user': {
                'user_id': user['user_id'],
                'username': user['username'],
                'email': user['email'],
                'userTableId': user_table_id
            }
        }), 200

    except Exception as e:
        log_error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", e)
        return jsonify({'status': 'error', 'message': f'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API qu√™n m·∫≠t kh·∫©u
@app.route('/auth/forgot-password', methods=['POST'])
def forgot_password():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        email = data.get('email')

        if not email:
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu email:", {'email': email})
            return jsonify({'status': 'error', 'message': 'Email l√† b·∫Øt bu·ªôc'}), 400

        email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
        if not re.match(email_regex, email):
            log_with_timestamp("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá:", {'email': email})
            return jsonify({'status': 'error', 'message': 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá'}), 400

        cursor.execute('SELECT * FROM users WHERE email = %s', (email,))
        user = cursor.fetchone()

        if not user:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi email:", {'email': email})
            return jsonify({'status': 'error', 'message': 'Email kh√¥ng t·ªìn t·∫°i'}), 400

        verification_code = generate_verification_code()
        code_expiry = int(time.time() * 1000) + 3600000  # 1 gi·ªù

        cursor.execute(
            'UPDATE users SET reset_code = %s, reset_code_expiry = %s WHERE email = %s',
            (verification_code, code_expiry, email)
        )
        connection.commit()

        log_with_timestamp("‚úÖ T·∫°o m√£ x√°c nh·∫≠n th√†nh c√¥ng:", {'email': email, 'verificationCode': verification_code})

        html_content = f"""
            <h2>M√£ x√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
            <p>Ch√†o {user['username']},</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. D∆∞·ªõi ƒë√¢y l√† m√£ x√°c nh·∫≠n c·ªßa b·∫°n:</p>
            <h3>{verification_code}</h3>
            <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.</p>
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© AI Tour</p>
        """
        send_email(email, 'M√£ x√°c nh·∫≠n ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u', html_content)

        return jsonify({
            'status': 'success',
            'message': 'M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n.'
        }), 200

    except Exception as e:
        log_error("‚ùå L·ªói khi x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u:", e)
        return jsonify({'status': 'error', 'message': f'C√≥ l·ªói x·∫£y ra: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API ki·ªÉm tra m√£ x√°c nh·∫≠n
@app.route('/auth/verify-code', methods=['POST'])
def verify_code():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        email = data.get('email')
        code = data.get('code')

        if not all([email, code]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin:", {'email': email, 'code': code})
            return jsonify({'status': 'error', 'message': 'Email v√† m√£ x√°c nh·∫≠n l√† b·∫Øt bu·ªôc'}), 400

        cursor.execute('SELECT * FROM users WHERE email = %s', (email,))
        user = cursor.fetchone()

        if not user:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi email:", {'email': email})
            return jsonify({'status': 'error', 'message': 'Email kh√¥ng t·ªìn t·∫°i'}), 400

        if user['reset_code'] != code:
            log_with_timestamp("‚ö†Ô∏è M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng:", {'email': email, 'code': code})
            return jsonify({'status': 'error', 'message': 'M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng'}), 400

        if user['reset_code_expiry'] < int(time.time() * 1000):
            log_with_timestamp("‚ö†Ô∏è M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n:", {'email': email})
            return jsonify({'status': 'error', 'message': 'M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n'}), 400

        reset_token = os.urandom(32).hex()
        reset_token_expiry = int(time.time() * 1000) + 3600000

        cursor.execute(
            'UPDATE users SET reset_code = NULL, reset_code_expiry = NULL, reset_token = %s, reset_token_expiry = %s WHERE email = %s',
            (reset_token, reset_token_expiry, email)
        )
        connection.commit()

        log_with_timestamp("‚úÖ X√°c nh·∫≠n m√£ th√†nh c√¥ng:", {'email': email, 'resetToken': reset_token})

        return jsonify({
            'status': 'success',
            'message': 'X√°c nh·∫≠n m√£ th√†nh c√¥ng.',
            'resetToken': reset_token
        }), 200

    except Exception as e:
        log_error("‚ùå L·ªói khi ki·ªÉm tra m√£ x√°c nh·∫≠n:", e)
        return jsonify({'status': 'error', 'message': f'C√≥ l·ªói x·∫£y ra: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
@app.route('/auth/reset-password', methods=['POST'])
def reset_password():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        token = data.get('token')
        new_password = data.get('newPassword')
        confirm_password = data.get('confirmPassword')

        if not all([token, new_password, confirm_password]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin:", {'token': token, 'newPassword': new_password})
            return jsonify({'status': 'error', 'message': 'T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc'}), 400

        if new_password != confirm_password:
            return jsonify({'status': 'error', 'message': 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp'}), 400

        cursor.execute('SELECT * FROM users WHERE reset_token = %s', (token,))
        user = cursor.fetchone()

        if not user:
            log_with_timestamp("‚ö†Ô∏è Token kh√¥ng h·ª£p l·ªá:", {'token': token})
            return jsonify({'status': 'error', 'message': 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'}), 400

        if user['reset_token_expiry'] < int(time.time() * 1000):
            log_with_timestamp("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n:", {'token': token})
            return jsonify({'status': 'error', 'message': 'Token ƒë√£ h·∫øt h·∫°n'}), 400

        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())

        cursor.execute(
            'UPDATE users SET password = %s, reset_token = NULL, reset_token_expiry = NULL WHERE reset_token = %s',
            (hashed_password, token)
        )

        cursor.execute(
            'UPDATE user SET password = %s WHERE email = %s',
            (hashed_password, user['email'])
        )
        connection.commit()

        log_with_timestamp("‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng:", {'email': user['email']})
        return jsonify({
            'status': 'success',
            'message': 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng m·∫≠t kh·∫©u m·ªõi.'
        }), 200

    except Exception as e:
        log_error("‚ùå L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", e)
        return jsonify({'status': 'error', 'message': f'C√≥ l·ªói x·∫£y ra: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API l·∫•y danh s√°ch tour
@app.route('/tours', methods=['GET'])
def get_tours():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT * FROM product")
        rows = cursor.fetchall()
        log_with_timestamp("üìä D·ªØ li·ªáu tour t·ª´ database:", rows)

        processed_tours = []
        for tour in rows:
            tour['image'] = tour.get('image', '')
            cursor.execute("SELECT image_url FROM gallery WHERE tour_id = %s", (tour['id'],))
            gallery_rows = cursor.fetchall()
            tour['gallery'] = [row['image_url'] for row in gallery_rows]
            processed_tours.append(tour)

        return jsonify(processed_tours)

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y danh s√°ch tour:", e)
        return jsonify({'error': 'L·ªói h·ªá th·ªëng khi l·∫•y danh s√°ch tour', 'details': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API l·∫•y chi ti·∫øt tour theo ID
@app.route('/tour/<int:tour_id>', methods=['GET'])
def get_tour(tour_id):
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT * FROM product WHERE id = %s", (tour_id,))
        product_rows = cursor.fetchall()
        if not product_rows:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tour:", {'id': tour_id})
            return jsonify({'error': 'Tour kh√¥ng t·ªìn t·∫°i'}), 404

        tour = product_rows[0]
        tour['image'] = tour.get('image', '')

        cursor.execute("SELECT image_url FROM gallery WHERE tour_id = %s", (tour_id,))
        gallery_rows = cursor.fetchall()
        tour['gallery'] = [row['image_url'] for row in gallery_rows]

        cursor.execute("SELECT day, activities FROM itinerary WHERE tour_id = %s", (tour_id,))
        itinerary_rows = cursor.fetchall()
        tour['itinerary'] = [{'day': row['day'], 'activities': json.loads(row['activities'])} for row in itinerary_rows]

        tour['bookingLink'] = f"/tour-detail.html?id={tour['id']}"

        log_with_timestamp("üìã Chi ti·∫øt tour:", tour)
        return jsonify(tour)

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y chi ti·∫øt tour:", e)
        return jsonify({'error': 'L·ªói h·ªá th·ªëng khi l·∫•y chi ti·∫øt tour', 'details': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API t·∫°o ƒë∆°n h√†ng
@app.route('/create-order', methods=['POST'])
def create_order():
    log_with_timestamp("‚úÖ Nh·∫≠n request t·ª´ frontend:", request.get_json())

    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        product_id = data.get('product_id')
        user_info = data.get('userInfo')
        user_id = data.get('user_id')

        if not user_id:
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu user_id")
            return jsonify({'error': 'Thi·∫øu user_id'}), 400

        cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
        users = cursor.fetchall()
        if not users:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user trong b·∫£ng users:", {'user_id': user_id})
            return jsonify({'error': 'Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá'}), 401
        user = users[0]
        log_with_timestamp("‚úÖ T√¨m th·∫•y user trong b·∫£ng users:", {'user_id': user_id})

        if not all([product_id, user_info, user_info.get('name'), user_info.get('email'), user_info.get('phone')]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin:", {'product_id': product_id, 'userInfo': user_info})
            return jsonify({'error': 'Thi·∫øu th√¥ng tin tour ho·∫∑c ng∆∞·ªùi d√πng'}), 400

        email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
        if not re.match(email_regex, user_info['email']):
            log_with_timestamp("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá:", {'email': user_info['email']})
            return jsonify({'error': 'Email kh√¥ng h·ª£p l·ªá'}), 400

        phone_regex = r'^\d{10,15}$'
        if not re.match(phone_regex, user_info['phone']):
            log_with_timestamp("‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá:", {'phone': user_info['phone']})
            return jsonify({'error': 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i c√≥ 10-15 ch·ªØ s·ªë)'}), 400

        connection.start_transaction()

        cursor.execute("SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s", ('aitour', 'product'))
        if not cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è B·∫£ng product kh√¥ng t·ªìn t·∫°i")
            connection.rollback()
            return jsonify({'error': 'B·∫£ng product kh√¥ng t·ªìn t·∫°i trong database'}), 500
        log_with_timestamp("‚úÖ B·∫£ng product t·ªìn t·∫°i")

        cursor.execute("SELECT * FROM product WHERE id = %s", (product_id,))
        product_rows = cursor.fetchall()
        if not product_rows:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tour:", {'product_id': product_id})
            connection.rollback()
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y tour'}), 404

        product = product_rows[0]
        log_with_timestamp("üîç Th√¥ng tin tour:", product)

        if not product['price']:
            log_with_timestamp("‚ö†Ô∏è Gi√° tour kh√¥ng t·ªìn t·∫°i:", {'product_id': product_id})
            connection.rollback()
            return jsonify({'error': 'Gi√° tour kh√¥ng t·ªìn t·∫°i'}), 400

        amount = int(''.join(filter(str.isdigit, product['price'] or '0')))
        log_with_timestamp("üîç S·ªë ti·ªÅn sau khi x·ª≠ l√Ω:", amount)

        if not amount or amount < 1000 or amount > 10000000:
            log_with_timestamp("‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá:", {'amount': amount})
            connection.rollback()
            return jsonify({
                'error': 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá (t·ªëi thi·ªÉu 1,000 VND, t·ªëi ƒëa 10,000,000 VND)',
                'received_amount': amount
            }), 400

        cursor.execute("SELECT id FROM user WHERE email = %s", (user_info['email'],))
        user_table_rows = cursor.fetchall()
        if not user_table_rows:
            log_with_timestamp("üîç Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong b·∫£ng user, t·∫°o m·ªõi...")
            hashed_password = bcrypt.hashpw("defaultpassword".encode('utf-8'), bcrypt.gensalt())
            cursor.execute(
                "INSERT INTO user (name, email, phone, username, password) VALUES (%s, %s, %s, %s, %s)",
                (user_info['name'], user_info['email'], user_info['phone'], user_info['name'], hashed_password)
            )
            user_table_id = cursor.lastrowid
            log_with_timestamp("‚úÖ Th√™m ng∆∞·ªùi d√πng m·ªõi v√†o b·∫£ng user:", {'userId': user_table_id, 'email': user_info['email']})
        else:
            user_table_id = user_table_rows[0]['id']
            log_with_timestamp("‚úÖ Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong b·∫£ng user:", {'userId': user_table_id, 'email': user_info['email']})

        app_trans_id = generate_trans_id()
        order = {
            'app_id': config['app_id'],
            'app_trans_id': app_trans_id,
            'app_user': user_info['email'],
            'app_time': int(time.time() * 1000),
            'amount': amount,
            'item': json.dumps([{'itemid': str(product['id']), 'itemname': product['title'], 'itemprice': amount, 'itemquantity': 1}]),
            'embed_data': json.dumps({'redirecturl': "http://localhost:5500/index.html"}),
            'description': f"Thanh to√°n ƒë∆°n h√†ng - Tour: {product['title']}",
            'bank_code': "zalopayapp",
            'callback_url': "http://localhost:5500/payment_callback"
        }

        data = f"{order['app_id']}|{order['app_trans_id']}|{order['app_user']}|{order['amount']}|{order['app_time']}|{order['embed_data']}|{order['item']}"
        log_with_timestamp("Chu·ªói d·ªØ li·ªáu ƒë·ªÉ t·∫°o MAC:", data)
        mac = hmac.new(config['key1'].encode('utf-8'), data.encode('utf-8'), hashlib.sha256).hexdigest()
        order['mac'] = mac

        log_with_timestamp("üîê Ch·ªØ k√Ω MAC:", order['mac'])
        log_with_timestamp("üì§ G·ª≠i request t·ªõi ZaloPay:", order)

        response = requests.post(config['endpoint'], params=order)
        response_data = response.json()
        log_with_timestamp("üì© Ph·∫£n h·ªìi t·ª´ ZaloPay:", response_data)

        if response_data.get('return_code') != 1:
            log_with_timestamp("‚ö†Ô∏è L·ªói t·ª´ ZaloPay:", response_data)
            connection.rollback()
            return jsonify({
                'error': f"L·ªói t·ª´ ZaloPay: {response_data.get('return_message', 'Kh√¥ng x√°c ƒë·ªãnh')}",
                'return_code': response_data.get('return_code'),
                'sub_return_code': response_data.get('sub_return_code'),
                'sub_return_message': response_data.get('sub_return_message')
            }), 400

        cursor.execute("SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s", ('aitour', 'order'))
        if not cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è B·∫£ng order kh√¥ng t·ªìn t·∫°i trong database")
            connection.rollback()
            return jsonify({
                'error': "B·∫£ng order kh√¥ng t·ªìn t·∫°i trong database. Vui l√≤ng t·∫°o b·∫£ng order v·ªõi c√°c c·ªôt: id, user_id, order_name, amount, payment_method, payment_status, app_trans_id, mac, created_at"
            }), 500
        log_with_timestamp("‚úÖ B·∫£ng order t·ªìn t·∫°i")

        cursor.execute(
            "INSERT INTO `order` (user_id, order_name, amount, payment_method, payment_status, app_trans_id, mac) VALUES (%s, %s, %s, %s, %s, %s, %s)",
            (
                user_table_id,
                f"Tour: {product['title']}",
                amount,
                "ZaloPay",
                'PENDING' if response_data.get('return_code') == 1 else 'FAILED',
                order['app_trans_id'],
                order['mac']
            )
        )
        order_id = cursor.lastrowid
        log_with_timestamp("‚úÖ L∆∞u ƒë∆°n h√†ng th√†nh c√¥ng:", {'orderId': order_id})

        connection.commit()
        log_with_timestamp("‚úÖ Commit transaction th√†nh c√¥ng")

        return jsonify({
            'order_url': response_data.get('order_url'),
            'order_id': order_id,
            'app_trans_id': order['app_trans_id']
        })

    except Exception as e:
        log_error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", e)
        if connection:
            connection.rollback()
            log_with_timestamp("üîç ƒê√£ rollback transaction")
        return jsonify({
            'error': 'L·ªói h·ªá th·ªëng khi t·∫°o ƒë∆°n h√†ng',
            'details': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API x·ª≠ l√Ω callback t·ª´ ZaloPay
@app.route('/payment_callback', methods=['POST'])
def payment_callback():
    log_with_timestamp("üì© Webhook t·ª´ ZaloPay:", request.get_json())

    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        if not data or 'data' not in data or 'mac' not in data:
            log_with_timestamp("‚ö†Ô∏è Callback kh√¥ng h·ª£p l·ªá:", data)
            return jsonify({'return_code': 0, 'return_message': 'D·ªØ li·ªáu callback kh√¥ng h·ª£p l·ªá'}), 400

        received_mac = data['mac']
        computed_mac = hmac.new(config['key2'].encode('utf-8'), data['data'].encode('utf-8'), hashlib.sha256).hexdigest()
        if received_mac != computed_mac:
            log_with_timestamp("‚ö†Ô∏è Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá:", {'receivedMac': received_mac, 'computedMac': computed_mac})
            return jsonify({'return_code': 0, 'return_message': 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá'}), 400

        callback_data = json.loads(data['data'])
        app_trans_id = callback_data['app_trans_id']
        status = callback_data['status']

        cursor.execute("SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s", ('aitour', 'order'))
        if not cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è B·∫£ng order kh√¥ng t·ªìn t·∫°i trong database")
            return jsonify({'return_code': 0, 'return_message': 'B·∫£ng order kh√¥ng t·ªìn t·∫°i trong database'}), 500

        new_status = 'SUCCESS' if status == 1 else 'FAILED'
        cursor.execute(
            "UPDATE `order` SET payment_status = %s WHERE app_trans_id = %s",
            (new_status, app_trans_id)
        )
        if cursor.rowcount == 0:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t:", {'app_trans_id': app_trans_id})
        else:
            log_with_timestamp(f"‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng: {app_trans_id} -> {new_status}")

        connection.commit()
        return jsonify({'return_code': 1, 'return_message': 'Nh·∫≠n th√†nh c√¥ng'})

    except Exception as e:
        log_error("‚ùå L·ªói x·ª≠ l√Ω callback:", e)
        return jsonify({'return_code': 0, 'return_message': 'L·ªói x·ª≠ l√Ω callback', 'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
@app.route('/order-status/<app_trans_id>', methods=['GET'])
def order_status(app_trans_id):
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA = %s AND TABLE_NAME = %s", ('aitour', 'order'))
        if not cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è B·∫£ng order kh√¥ng t·ªìn t·∫°i trong database")
            return jsonify({'error': 'B·∫£ng order kh√¥ng t·ªìn t·∫°i trong database'}), 500

        cursor.execute("SELECT payment_status FROM `order` WHERE app_trans_id = %s", (app_trans_id,))
        rows = cursor.fetchall()

        if not rows:
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng:", {'app_trans_id': app_trans_id})
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404

        return jsonify({'status': rows[0]['payment_status']})

    except Exception as e:
        log_error("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng:", e)
        return jsonify({'error': 'L·ªói h·ªá th·ªëng khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng', 'details': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API cho Trang t·ªïng quan (Dashboard)
@app.route('/api/dashboard', methods=['GET'])
def dashboard():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT COUNT(*) AS total_tours FROM product")
        tours = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) AS total_bookings FROM `order`")
        bookings = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) AS total_customers FROM users")
        customers = cursor.fetchone()

        return jsonify({
            'total_tours': tours['total_tours'],
            'total_bookings': bookings['total_bookings'],
            'total_customers': customers['total_customers']
        })

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y th·ªëng k√™ dashboard:", e)
        return jsonify({'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API cho danh s√°ch kh√°ch h√†ng
@app.route('/api/customers', methods=['GET'])
def customers():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("""
            SELECT u.id, u.name, u.email, u.phone, o.order_name, o.payment_status
            FROM user u
            LEFT JOIN `order` o ON u.id = o.user_id
        """)
        customers = cursor.fetchall()

        for customer in customers:
            customer['booking_date'] = "2025-04-07"
            customer['departure_date'] = "2025-04-10"

        return jsonify(customers)

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng:", e)
        return jsonify({'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API cho danh s√°ch ƒë·∫∑t tour
@app.route('/api/bookings', methods=['GET'])
def bookings():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT id, order_name, payment_status FROM `order`")
        bookings = cursor.fetchall()
        return jsonify(bookings)

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t tour:", e)
        return jsonify({'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API cho b√°o c√°o v√† th·ªëng k√™
@app.route('/api/reports', methods=['GET'])
def reports():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT SUM(amount) AS total_revenue FROM `order` WHERE payment_status = 'SUCCESS'")
        revenue = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) AS total_bookings FROM `order`")
        bookings = cursor.fetchone()
        cursor.execute("""
            SELECT order_name, COUNT(*) AS booking_count
            FROM `order`
            GROUP BY order_name
            ORDER BY booking_count DESC
            LIMIT 1
        """)
        popular = cursor.fetchone()

        return jsonify({
            'total_revenue': revenue['total_revenue'] or 0,
            'total_bookings': bookings['total_bookings'],
            'popular_tour': popular['order_name'] if popular else "Kh√¥ng c√≥ d·ªØ li·ªáu"
        })

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y b√°o c√°o:", e)
        return jsonify({'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API cho danh s√°ch tour
@app.route('/api/tours', methods=['GET'])
def api_tours():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT id, title, price, description, url, hotel, transport FROM product")
        tours = cursor.fetchall()
        return jsonify(tours)

    except Exception as e:
        log_error("‚ùå L·ªói khi l·∫•y danh s√°ch tour:", e)
        return jsonify({'error': str(e)}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API th√™m tour m·ªõi
@app.route('/api/tours', methods=['POST'])
def add_tour():
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        title = data.get('title')
        price = data.get('price')
        description = data.get('description')
        url = data.get('url')
        hotel = data.get('hotel')
        transport = data.get('transport')

        if not all([title, price]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin tour:", data)
            return jsonify({'error': 'T√™n tour v√† gi√° l√† b·∫Øt bu·ªôc'}), 400

        # Ki·ªÉm tra URL h·ª£p l·ªá n·∫øu c√≥
        if url:
            try:
                response = requests.head(url, timeout=5, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                })
                if response.status_code != 200 or not response.headers.get('content-type', '').startswith('image/'):
                    log_with_timestamp("‚ö†Ô∏è URL ·∫£nh kh√¥ng h·ª£p l·ªá:", {'url': url})
                    return jsonify({'error': 'URL ·∫£nh kh√¥ng h·ª£p l·ªá'}), 400
            except requests.RequestException:
                log_with_timestamp("‚ö†Ô∏è URL ·∫£nh kh√¥ng h·ª£p l·ªá:", {'url': url})
                return jsonify({'error': 'URL ·∫£nh kh√¥ng h·ª£p l·ªá'}), 400

        cursor.execute(
            "INSERT INTO product (title, price, description, url, hotel, transport) VALUES (%s, %s, %s, %s, %s, %s)",
            (title, price, description, url, hotel, transport)
        )
        tour_id = cursor.lastrowid
        connection.commit()

        log_with_timestamp("‚úÖ Th√™m tour th√†nh c√¥ng:", {'id': tour_id, 'title': title})
        return jsonify({'message': 'Th√™m tour th√†nh c√¥ng', 'tourId': tour_id}), 201

    except Exception as e:
        log_error("‚ùå L·ªói khi th√™m tour:", e)
        return jsonify({'error': f'L·ªói h·ªá th·ªëng khi th√™m tour: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API s·ª≠a tour
@app.route('/api/tours/<int:tour_id>', methods=['PUT'])
def update_tour(tour_id):
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        data = request.get_json()
        title = data.get('title')
        price = data.get('price')
        description = data.get('description')
        url = data.get('url')
        hotel = data.get('hotel')
        transport = data.get('transport')

        if not all([title, price]):
            log_with_timestamp("‚ö†Ô∏è Thi·∫øu th√¥ng tin tour:", data)
            return jsonify({'error': 'T√™n tour v√† gi√° l√† b·∫Øt bu·ªôc'}), 400

        if url:
            try:
                response = requests.head(url, timeout=5, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                })
                if response.status_code != 200 or not response.headers.get('content-type', '').startswith('image/'):
                    log_with_timestamp("‚ö†Ô∏è URL ·∫£nh kh√¥ng h·ª£p l·ªá:", {'url': url})
                    return jsonify({'error': 'URL ·∫£nh kh√¥ng h·ª£p l·ªá'}), 400
            except requests.RequestException:
                log_with_timestamp("‚ö†Ô∏è URL ·∫£nh kh√¥ng h·ª£p l·ªá:", {'url': url})
                return jsonify({'error': 'URL ·∫£nh kh√¥ng h·ª£p l·ªá'}), 400

        cursor.execute("SELECT * FROM product WHERE id = %s", (tour_id,))
        if not cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tour:", {'tourId': tour_id})
            return jsonify({'error': 'Tour kh√¥ng t·ªìn t·∫°i'}), 404

        cursor.execute(
            "UPDATE product SET title = %s, price = %s, description = %s, url = %s, hotel = %s, transport = %s WHERE id = %s",
            (title, price, description, url, hotel, transport, tour_id)
        )
        connection.commit()

        log_with_timestamp("‚úÖ S·ª≠a tour th√†nh c√¥ng:", {'tourId': tour_id, 'title': title})
        return jsonify({'message': 'S·ª≠a tour th√†nh c√¥ng'}), 200

    except Exception as e:
        log_error("‚ùå L·ªói khi s·ª≠a tour:", e)
        return jsonify({'error': f'L·ªói h·ªá th·ªëng khi s·ª≠a tour: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API x√≥a tour
@app.route('/api/tours/<int:tour_id>', methods=['DELETE'])
def delete_tour(tour_id):
    connection = None
    try:
        connection = connection_pool.get_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT * FROM product WHERE id = %s", (tour_id,))
        if not cursor.fetchall():
            log_with_timestamp("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tour:", {'tourId': tour_id})
            return jsonify({'error': 'Tour kh√¥ng t·ªìn t·∫°i'}), 404

        cursor.execute("DELETE FROM product WHERE id = %s", (tour_id,))
        connection.commit()

        log_with_timestamp("‚úÖ X√≥a tour th√†nh c√¥ng:", {'tourId': tour_id})
        return jsonify({'message': 'X√≥a tour th√†nh c√¥ng'}), 200

    except Exception as e:
        log_error("‚ùå L·ªói khi x√≥a tour:", e)
        return jsonify({'error': f'L·ªói h·ªá th·ªëng khi x√≥a tour: {str(e)}'}), 500
    finally:
        if connection:
            connection.close()
            log_with_timestamp("üîå ƒê√£ gi·∫£i ph√≥ng k·∫øt n·ªëi MySQL")

# API x·ª≠ l√Ω tin nh·∫Øn chat
@app.route('/chat', methods=['POST', 'OPTIONS'])
def chat_endpoint():
    if request.method == 'OPTIONS':  # X·ª≠ l√Ω y√™u c·∫ßu OPTIONS cho CORS
        return '', 200

    data = request.get_json()
    if 'message' not in data:
        return jsonify({"error": "Missing 'message' parameter"}), 400

    user_message = data['message']
    log_with_timestamp("üì© Nh·∫≠n tin nh·∫Øn t·ª´ chatbox:", {'message': user_message})

    try:
        bot_response = interact_with_chatbot(user_message)
        log_with_timestamp("üì§ Ph·∫£n h·ªìi t·ª´ chatbot:", bot_response)
        return jsonify({"response": bot_response['text'], "image": bot_response['image']})
    except Exception as e:
        log_error("‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn chat:", e)
        return jsonify({"error": f"Internal Server Error: {e}"}), 500

def interact_with_chatbot(question):
    allowed_topics = [
        "du l·ªãch", "travel", "Vietnam", "Vi·ªát Nam", "ƒë·ªãa ƒëi·ªÉm du l·ªãch", 
        "·∫©m th·ª±c", "ƒë·∫∑c s·∫£n", "homestay", "ph∆∞∆°ng ti·ªán ƒëi l·∫°i", "visa", 
        "ƒëi ch∆°i", "tour", "th·ªùi ti·∫øt", "kh√°ch s·∫°n", "v√© m√°y bay"
    ]
    
    question_lower = question.lower()
    
    if not any(topic in question_lower for topic in allowed_topics):
        return {"text": "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi v·ªÅ ch·ªß ƒë·ªÅ du l·ªãch t·∫°i Vi·ªát Nam. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng, ·∫©m th·ª±c, ph∆∞∆°ng ti·ªán di chuy·ªÉn,...", "image": None}

    # T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm trong c√¢u h·ªèi
    connection = connection_pool.get_connection()
    cursor = connection.cursor(dictionary=True)
    image_url = None

    # T√¨m h√¨nh ·∫£nh li√™n quan ƒë·∫øn ƒë·ªãa ƒëi·ªÉm
    if "ƒë√† l·∫°t" in question_lower:
        cursor.execute("SELECT url FROM product WHERE title LIKE '%ƒê√† L·∫°t%' LIMIT 1")
        result = cursor.fetchone()
        image_url = result['url'] if result and result['url'] else None
        log_with_timestamp("üîç T√¨m URL h√¨nh ·∫£nh cho ƒê√† L·∫°t:", {'url': image_url})
    elif "h·∫° long" in question_lower:
        cursor.execute("SELECT url FROM product WHERE title LIKE '%H·∫° Long%' LIMIT 1")
        result = cursor.fetchone()
        image_url = result['url'] if result and result['url'] else None
        log_with_timestamp("üîç T√¨m URL h√¨nh ·∫£nh cho H·∫° Long:", {'url': image_url})
    elif "sa pa" in question_lower:
        cursor.execute("SELECT url FROM product WHERE title LIKE '%Sa Pa%' LIMIT 1")
        result = cursor.fetchone()
        image_url = result['url'] if result and result['url'] else None
        log_with_timestamp("üîç T√¨m URL h√¨nh ·∫£nh cho Sa Pa:", {'url': image_url})

    connection.close()

    response = chat.send_message(f"Tr·∫£ l·ªùi c√¢u h·ªèi sau b·∫±ng ti·∫øng Vi·ªát:\n{question}")
    cleaned_response = response.text.replace('*', '')
    
    return {"text": cleaned_response, "image": image_url}

# Ch·∫°y server Flask tr√™n c·ªïng 5000
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)