// script.js

// H√†m ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† c·∫≠p nh·∫≠t giao di·ªán
const updateAuthUI = () => {
    const navAuth = document.querySelector("#nav-auth");
    const navUser = document.querySelector("#nav-user");
    const userName = document.querySelector("#user-name");
    const logoutLink = document.querySelector("#logout-link");

    const user = JSON.parse(localStorage.getItem("user"));

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa navAuth v√† navUser tr∆∞·ªõc khi thao t√°c
    if (navAuth && navUser) {
        if (user) {
            navAuth.style.display = "none";
            navUser.style.display = "block";
            if (userName) {
                userName.textContent = user.username;
            }
        } else {
            navAuth.style.display = "block";
            navUser.style.display = "none";
        }
    } else {
        console.warn("Kh√¥ng t√¨m th·∫•y #nav-auth ho·∫∑c #nav-user trong DOM. B·ªè qua c·∫≠p nh·∫≠t giao di·ªán ƒëƒÉng nh·∫≠p.");
    }

    if (logoutLink) {
        logoutLink.addEventListener("click", (e) => {
            e.preventDefault();
            localStorage.removeItem("user");
            localStorage.removeItem("user_id");
            localStorage.removeItem("lastTransactionId");
            localStorage.removeItem("lastOrderId");
            localStorage.removeItem("paymentSuccess");
            window.location.href = "index.html";
        });
    }
};

// H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p (d√†nh cho login.html)
const handleLogin = () => {
    const loginForm = document.querySelector("#loginForm");
    if (loginForm) {
        loginForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const username = document.querySelector("#username").value;
            const password = document.querySelector("#password").value;

            try {
                const response = await fetch("http://localhost:5500/auth/login", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ username, password }),
                });
                const data = await response.json();

                if (data.status === "success") {
                    localStorage.setItem("user", JSON.stringify(data.user));
                    localStorage.setItem("user_id", data.user.user_id); // L∆∞u user_id
                    window.location.href = "index.html";
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
                alert("ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        });
    }
};

// H√†m kh·ªüi t·∫°o chatbox
const initializeChatbox = () => {
    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input span");

    if (!chatbotToggler || !closeBtn || !chatbox || !chatInput || !sendChatBtn) {
        console.error("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ chatbox trong DOM!");
        return;
    }

    let userMessage = null;
    const inputInitHeight = chatInput.scrollHeight;

    const createChatLi = (message, className, image = null) => {
        const chatLi = document.createElement("li");
        chatLi.classList.add("chat", className);
        let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
        chatLi.innerHTML = chatContent;
        chatLi.querySelector("p").innerHTML = message;
        if (image) {
            const img = document.createElement("img");
            img.src = image;
            img.style.maxWidth = "100%";
            img.style.marginTop = "10px";
            img.style.borderRadius = "5px";
            img.alt = "H√¨nh ·∫£nh ƒë·ªãa ƒëi·ªÉm du l·ªãch";
            img.onerror = () => {
                console.error("Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh:", image);
                img.remove();
                chatLi.querySelector("p").innerHTML += "<br><i>(Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh)</i>";
            };
            img.onload = () => {
                console.log("H√¨nh ·∫£nh ƒë√£ t·∫£i th√†nh c√¥ng:", image);
            };
            chatLi.appendChild(img);
        }
        return chatLi;
    };

    const generateResponse = async (chatElement) => {
        const API_URL = "http://localhost:5500/chat";
        const messageElement = chatElement.querySelector("p");

        const requestOptions = {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: userMessage }),
        };

        try {
            const response = await fetch(API_URL, requestOptions);
            const data = await response.json();
            console.log("Ph·∫£n h·ªìi t·ª´ API /chat:", data);

            if (response.ok) {
                messageElement.innerHTML = data.response;
                if (data.image) {
                    const img = document.createElement("img");
                    img.src = data.image;
                    img.style.maxWidth = "100%";
                    img.style.marginTop = "10px";
                    img.style.borderRadius = "5px";
                    img.alt = "H√¨nh ·∫£nh ƒë·ªãa ƒëi·ªÉm du l·ªãch";
                    
                    img.onerror = () => {
                        console.error("Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh:", data.image);
                        img.remove();
                        messageElement.innerHTML += "<br><i>(Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh)</i>";
                    };
                    
                    img.onload = () => {
                        console.log("H√¨nh ·∫£nh ƒë√£ t·∫£i th√†nh c√¥ng:", data.image);
                    };

                    chatElement.appendChild(img);
                } else {
                    console.log("Kh√¥ng c√≥ h√¨nh ·∫£nh trong ph·∫£n h·ªìi t·ª´ API.");
                }
                saveMessage("incoming", data.response, data.image);
            } else {
                throw new Error(data.error || "Request failed");
            }
        } catch (error) {
            console.error("Error:", error);
            messageElement.classList.add("error");
            messageElement.textContent = "Oops! Something went wrong. Please try again.";
            saveMessage("incoming", "Oops! Something went wrong. Please try again.");
        } finally {
            chatbox.scrollTo(0, chatbox.scrollHeight);
        }
    };

    const handleChat = () => {
        userMessage = chatInput.value.trim();
        if (!userMessage) return;

        chatInput.value = "";
        chatInput.style.height = `${inputInitHeight}px`;

        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);
        saveMessage("outgoing", userMessage);

        const incomingChatLi = createChatLi("Thinking...", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);

        generateResponse(incomingChatLi);
    };

    chatInput.addEventListener("input", () => {
        chatInput.style.height = `${inputInitHeight}px`;
        chatInput.style.height = `${chatInput.scrollHeight}px`;
    });

    chatInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
            e.preventDefault();
            handleChat();
        }
    });

    sendChatBtn.addEventListener("click", handleChat);

    chatbotToggler.addEventListener("click", () => {
        document.body.classList.toggle("show-chatbot");
        localStorage.setItem("chatbotOpen", document.body.classList.contains("show-chatbot"));
    });

    closeBtn.addEventListener("click", () => {
        document.body.classList.remove("show-chatbot");
        localStorage.setItem("chatbotOpen", "false");
    });

    // G√°n s·ª± ki·ªán cho n√∫t "X√≥a l·ªãch s·ª≠" trong chatbox-component.html
    const clearHistoryBtn = document.querySelector(".clear-history-btn");
    if (clearHistoryBtn) {
        clearHistoryBtn.addEventListener("click", clearChatHistory);
    } else {
        console.warn("Kh√¥ng t√¨m th·∫•y n√∫t 'X√≥a l·ªãch s·ª≠' trong DOM!");
    }

    loadChatHistory();
};

// H√†m l∆∞u tin nh·∫Øn v√†o localStorage
const saveMessage = (sender, text, image = null) => {
    const chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];
    chatHistory.push({ sender, text, image, timestamp: new Date().toISOString() });
    localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
};

// H√†m t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán t·ª´ localStorage
const loadChatHistory = () => {
    const chatbox = document.querySelector(".chatbox");
    if (!chatbox) {
        console.error("Kh√¥ng t√¨m th·∫•y chatbox ƒë·ªÉ t·∫£i l·ªãch s·ª≠!");
        return;
    }

    const chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];
    chatbox.innerHTML = `
        <li class="chat incoming">
            <span class="material-symbols-outlined">smart_toy</span>
            <p>Hi there üëã<br>How can I help you today?</p>
        </li>
    `;

    chatHistory.forEach((message) => {
        const messageLi = document.createElement("li");
        messageLi.classList.add("chat", message.sender);
        const chatContent =
            message.sender === "outgoing"
                ? `<p>${message.text}</p>`
                : `<span class="material-symbols-outlined">smart_toy</span><p>${message.text}</p>`;
        messageLi.innerHTML = chatContent;
        if (message.image) {
            const img = document.createElement("img");
            img.src = message.image;
            img.style.maxWidth = "100%";
            img.style.marginTop = "10px";
            img.style.borderRadius = "5px";
            img.alt = "H√¨nh ·∫£nh ƒë·ªãa ƒëi·ªÉm du l·ªãch";
            img.onerror = () => {
                console.error("Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ l·ªãch s·ª≠:", message.image);
                img.remove();
                messageLi.querySelector("p").innerHTML += "<br><i>(Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh)</i>";
            };
            messageLi.appendChild(img);
        }
        chatbox.appendChild(messageLi);
    });

    chatbox.scrollTo(0, chatbox.scrollHeight);
};

// H√†m x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
const clearChatHistory = () => {
    localStorage.removeItem("chatHistory");
    const chatbox = document.querySelector(".chatbox");
    if (chatbox) {
        chatbox.innerHTML = `
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <p>Hi there üëã<br>How can I help you today?</p>
            </li>
        `;
        chatbox.scrollTo(0, chatbox.scrollHeight);
    } else {
        console.error("Kh√¥ng t√¨m th·∫•y chatbox ƒë·ªÉ x√≥a l·ªãch s·ª≠!");
    }
};

// H√†m kh·ªüi t·∫°o chatbox sau khi ch√®n
const initChatboxAfterLoad = () => {
    fetch("chatbox-component.html")
        .then((response) => {
            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ t·∫£i chatbox-component.html: ${response.statusText}`);
            }
            return response.text();
        })
        .then((data) => {
            const existingChatbot = document.querySelector(".chatbot");
            const existingToggler = document.querySelector(".chatbot-toggler");
            if (existingChatbot) existingChatbot.remove();
            if (existingToggler) existingToggler.remove();

            document.body.insertAdjacentHTML("beforeend", data);
            console.log("Chatbox loaded successfully");

            initializeChatbox();

            const isChatbotOpen = localStorage.getItem("chatbotOpen") === "true";
            if (isChatbotOpen) {
                document.body.classList.add("show-chatbot");
            }
        })
        .catch((error) => {
            console.error("L·ªói khi ch√®n chatbox:", error);
        });
};

// G·ªçi c√°c h√†m khi DOM s·∫µn s√†ng
document.addEventListener("DOMContentLoaded", () => {
    updateAuthUI();
    handleLogin();
    initChatboxAfterLoad();

    // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n sau khi ƒëƒÉng nh·∫≠p
    const paymentSuccess = localStorage.getItem("paymentSuccess");
    const lastOrderId = localStorage.getItem("lastOrderId");
    if (paymentSuccess === "true" && lastOrderId) {
        console.log(`‚úÖ Thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng ID: ${lastOrderId}`);
        // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ho·∫∑c x·ª≠ l√Ω th√™m n·∫øu c·∫ßn
    }
});