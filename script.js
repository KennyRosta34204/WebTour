
const updateAuthUI = () => {
    const navAuth = document.querySelector("#nav-auth");
    const navUser = document.querySelector("#nav-user");
    const userName = document.querySelector("#user-name");
    const logoutLink = document.querySelector("#logout-link");

    const user = JSON.parse(localStorage.getItem("user"));

    if (navAuth && navUser) {
        if (user) {
            navAuth.style.display = "none";
            navUser.style.display = "block";
            if (userName) {
                userName.textContent = user.username;
            }
        } else {
            navAuth.style.display = "block";
            navUser.style.display = "none";
        }
    } else {
        console.warn("Kh√¥ng t√¨m th·∫•y #nav-auth ho·∫∑c #nav-user trong DOM. B·ªè qua c·∫≠p nh·∫≠t giao di·ªán ƒëƒÉng nh·∫≠p.");
    }

    if (logoutLink) {
        logoutLink.addEventListener("click", (e) => {
            e.preventDefault();
            localStorage.removeItem("user");
            localStorage.removeItem("user_id");
            localStorage.removeItem("lastTransactionId");
            localStorage.removeItem("lastOrderId");
            localStorage.removeItem("paymentSuccess");
            localStorage.removeItem("chatbotOpen");
            window.location.href = "index.html";
        });
    }
};

const handleLogin = () => {
    const loginForm = document.querySelector("#loginForm");
    if (loginForm) {
        loginForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const username = document.querySelector("#username").value;
            const password = document.querySelector("#password").value;

            try {
                const response = await fetch("http://localhost:5500/auth/login", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ username, password }),
                });

                if (!response.ok) {
                    throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${response.status} - ${response.statusText}`);
                }

                const data = await response.json();

                if (data.status === "success") {
                    localStorage.setItem("user", JSON.stringify(data.user));
                    localStorage.setItem("user_id", data.user.user_id);
                    window.location.href = "index.html";
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
                alert("ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        });
    }
};

function fetchTourDetail(tourId) {
    console.log(`üîç ƒêang l·∫•y chi ti·∫øt tour v·ªõi ID: ${tourId}`);
    fetch(`/tour/${tourId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt tour: ${response.status} - ${response.statusText}`);
            }
            return response.json();
        })
        .then(tour => {
            console.log("‚úÖ D·ªØ li·ªáu tour:", tour);
            const chatboxMessages = document.getElementById('chatbox-messages');
            if (!chatboxMessages) {
                console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #chatbox-messages trong DOM");
                return;
            }

            const tourDetailHTML = `
                <div class="tour-detail">
                    <h3>${tour.title}</h3>
                    <img src="${tour.url || 'https://via.placeholder.com/200'}" alt="${tour.title}" style="width: 100%; max-width: 200px; border-radius: 8px; margin: 10px 0;">
                    <p>${tour.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p>
                    <p>Gi√°: ${tour.price || 'Li√™n h·ªá'}</p>
                    <p>Kh√°ch s·∫°n: ${tour.hotel || 'Kh√¥ng c√≥ th√¥ng tin'}</p>
                    <p>Ph∆∞∆°ng ti·ªán: ${tour.transport || 'Kh√¥ng c√≥ th√¥ng tin'}</p>
                    <button onclick="bookTour(${tour.id})" style="background-color: #007bff; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">ƒê·∫∑t tour ngay</button>
                </div>
            `;
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', 'bot-message');
            messageDiv.innerHTML = tourDetailHTML;
            chatboxMessages.appendChild(messageDiv);
            chatboxMessages.scrollTop = chatboxMessages.scrollHeight;
        })
        .catch(error => {
            console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt tour:", error);
            const chatboxMessages = document.getElementById('chatbox-messages');
            if (chatboxMessages) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message', 'bot-message');
                messageDiv.textContent = "C√≥ l·ªói x·∫£y ra khi l·∫•y chi ti·∫øt tour. Vui l√≤ng th·ª≠ l·∫°i sau.";
                chatboxMessages.appendChild(messageDiv);
                chatboxMessages.scrollTop = chatboxMessages.scrollHeight;
            }
        });
}

let isHistoryCleared = false;

const initializeChatbox = () => {
    const chatbotToggler = document.querySelector(".chatbot-toggler");
    const closeBtn = document.querySelector(".close-btn");
    const chatbox = document.querySelector(".chatbox");
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input span");

    if (!chatbotToggler || !closeBtn || !chatbox || !chatInput || !sendChatBtn) {
        console.error("Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ chatbox trong DOM!");
        return;
    }

    let userMessage = null;
    const inputInitHeight = chatInput.scrollHeight;
    const API_URL = "http://localhost:5500/api/chatbot";

    const createChatLi = (message, className, suggestions = []) => {
        const chatLi = document.createElement("li");
        chatLi.classList.add("chat", className);
    
        const messageContent = document.createElement("div");
        messageContent.classList.add("message-content");
    
        if (className === "incoming") {
            const botIcon = document.createElement("span");
            botIcon.classList.add("material-symbols-outlined");
            botIcon.textContent = "smart_toy";
            chatLi.appendChild(botIcon);
        }
    
        const textContent = document.createElement("div");
        textContent.classList.add("text-content");
        const messageP = document.createElement("p");
        messageP.innerHTML = message.replace(/\n/g, "<br>");
        textContent.appendChild(messageP);
        messageContent.appendChild(textContent);
    
        if (suggestions.length > 0 && className === "incoming") {
            const tourContainer = document.createElement("div");
            tourContainer.classList.add("tour-suggestions");
    
            suggestions.forEach(suggestion => {
                const tourDiv = document.createElement("div");
                tourDiv.classList.add("tour-item");
                tourDiv.innerHTML = `
                    <img src="${suggestion.image || 'https://via.placeholder.com/200x150'}" alt="${suggestion.title || 'Tour'}" style="width: 100%; max-width: 200px; border-radius: 8px; margin: 10px 0;">
                    <h4>${suggestion.title || 'Tour'}</h4>
                    <p>${suggestion.intro || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p> <!-- Hi·ªÉn th·ªã vƒÉn b·∫£n gi·ªõi thi·ªáu -->
                    <p><a href="${suggestion.link || '#'}" style="color: #007bff; text-decoration: none;">Xem chi ti·∫øt v√† ƒë·∫∑t tour</a></p>
                    <p>Gi√°: ${suggestion.price || 'Li√™n h·ªá'}</p>
                `;
                const link = tourDiv.querySelector("a");
                link.addEventListener("click", (e) => {
                    e.preventDefault();
                    console.log("Chuy·ªÉn h∆∞·ªõng ƒë·∫øn:", suggestion.link);
                    window.location.href = suggestion.link;
                });
                tourContainer.appendChild(tourDiv);
            });
    
            messageContent.appendChild(tourContainer);
        }
    
        chatLi.appendChild(messageContent);
        return chatLi;
    };

    const generateResponse = async (chatElement) => {
        const messageElement = chatElement.querySelector(".text-content p");

        const requestOptions = {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ question: userMessage }),
        };

        try {
            const response = await fetch(API_URL, requestOptions);
            if (!response.ok) {
                if (response.status === 400) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá");
                } else if (response.status === 405) {
                    throw new Error("Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ki·ªÉm tra server c√≥ h·ªó tr·ª£ POST cho /api/chatbot kh√¥ng.");
                } else if (response.status === 500) {
                    throw new Error("L·ªói server. Vui l√≤ng ki·ªÉm tra log server.");
                }
                throw new Error(`Server responded with status: ${response.status}`);
            }

            const data = await response.json();
            console.log("Ph·∫£n h·ªìi t·ª´ API /api/chatbot:", data);

            // X√≥a d√≤ng "ƒêang x·ª≠ l√Ω..." v√† c·∫≠p nh·∫≠t l·∫°i n·ªôi dung
            const parentLi = messageElement.closest("li.chat.incoming");
            parentLi.remove(); // X√≥a tin nh·∫Øn "ƒêang x·ª≠ l√Ω..."

            // T·∫°o tin nh·∫Øn m·ªõi v·ªõi ph·∫£n h·ªìi t·ª´ server
            const newChatLi = createChatLi(data.response, "incoming", data.suggestions || []);
            chatbox.appendChild(newChatLi);
            chatbox.scrollTo(0, chatbox.scrollHeight);

            saveMessage("incoming", data.response, null, data.suggestions || []);
        } catch (error) {
            console.error("L·ªói khi g·ªçi API /api/chatbot:", error);
            messageElement.classList.add("error");
            let errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i sau.";
            if (error.message.includes("Failed to fetch")) {
                errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra xem server c√≥ ƒëang ch·∫°y tr√™n c·ªïng 5500 kh√¥ng.";
            } else if (error.message.includes("400")) {
                errorMessage = "Tin nh·∫Øn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.";
            } else if (error.message.includes("405")) {
                errorMessage = "Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ki·ªÉm tra server c√≥ h·ªó tr·ª£ POST cho /api/chatbot kh√¥ng.";
            } else if (error.message.includes("500")) {
                errorMessage = "L·ªói server. Vui l√≤ng ki·ªÉm tra log server.";
            }
            messageElement.textContent = errorMessage;
            saveMessage("incoming", errorMessage);
        } finally {
            chatbox.scrollTo(0, chatbox.scrollHeight);
        }
    };

    const handleChat = () => {
        userMessage = chatInput.value.trim();
        if (!userMessage) {
            console.warn("Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return;
        }

        chatInput.value = "";
        chatInput.style.height = `${inputInitHeight}px`;

        const outgoingChatLi = createChatLi(userMessage, "outgoing");
        chatbox.appendChild(outgoingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);
        saveMessage("outgoing", userMessage);

        const incomingChatLi = createChatLi("ƒêang x·ª≠ l√Ω...", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);

        generateResponse(incomingChatLi);
    };

    chatInput.addEventListener("input", () => {
        chatInput.style.height = `${inputInitHeight}px`;
        chatInput.style.height = `${chatInput.scrollHeight}px`;
    });

    chatInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
            e.preventDefault();
            handleChat();
        }
    });

    sendChatBtn.addEventListener("click", handleChat);

    chatbotToggler.addEventListener("click", () => {
        document.body.classList.toggle("show-chatbot");
        localStorage.setItem("chatbotOpen", document.body.classList.contains("show-chatbot"));
    });

    closeBtn.addEventListener("click", () => {
        document.body.classList.remove("show-chatbot");
        localStorage.setItem("chatbotOpen", "false");
    });
};

const saveMessage = (sender, text, image = null, suggestions = null) => {
    // Lo·∫°i b·ªè ki·ªÉm tra isHistoryCleared ƒë·ªÉ lu√¥n l∆∞u tin nh·∫Øn m·ªõi
    const chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];
    chatHistory.push({ sender, text, image, suggestions, timestamp: new Date().toISOString() });
    localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
};

const loadChatHistory = () => {
    const chatbox = document.querySelector(".chatbox");
    if (!chatbox) {
        console.error("Kh√¥ng t√¨m th·∫•y chatbox ƒë·ªÉ t·∫£i l·ªãch s·ª≠!");
        return;
    }

    const chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];

    if (chatHistory.length === 0) {
        chatbox.innerHTML = `
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <div class="message-content">
                    <div class="text-content">
                        <p>Xin ch√†o! T√¥i l√† chatbot du l·ªãch c·ªßa AI Tour. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm c√°c tour du l·ªãch t·∫°i Vi·ªát Nam, g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm, ·∫©m th·ª±c, ph∆∞∆°ng ti·ªán di chuy·ªÉn, v√† nhi·ªÅu h∆°n n·ªØa. B·∫°n mu·ªën kh√°m ph√° n∆°i n√†o?</p>
                    </div>
                </div>
            </li>
        `;
    } else {
        chatbox.innerHTML = "";
        chatHistory.forEach((message) => {
            const chatLi = document.createElement("li");
            chatLi.classList.add("chat", message.sender);

            const messageContent = document.createElement("div");
            messageContent.classList.add("message-content");

            if (message.sender === "incoming") {
                const botIcon = document.createElement("span");
                botIcon.classList.add("material-symbols-outlined");
                botIcon.textContent = "smart_toy";
                chatLi.appendChild(botIcon);
            }

            const textContent = document.createElement("div");
            textContent.classList.add("text-content");
            const messageP = document.createElement("p");
            messageP.innerHTML = message.text.replace(/\n/g, "<br>");
            textContent.appendChild(messageP);
            messageContent.appendChild(textContent);

            if (message.suggestions && message.suggestions.length > 0) {
                const tourContainer = document.createElement("div");
                tourContainer.classList.add("tour-suggestions");
                message.suggestions.forEach(suggestion => {
                    const tourDiv = document.createElement("div");
                    tourDiv.classList.add("tour-item");
                    tourDiv.innerHTML = `
                        <img src="${suggestion.image || 'https://via.placeholder.com/200x150'}" alt="${suggestion.title || 'Tour'}" style="width: 100%; max-width: 200px; border-radius: 8px; margin: 10px 0;">
                        <p><a href="${suggestion.link || '#'}" style="color: #007bff; text-decoration: none;">Xem chi ti·∫øt v√† ƒë·∫∑t tour</a></p>
                        <p>Gi√°: ${suggestion.price || 'Li√™n h·ªá'}</p>
                    `;
                    tourContainer.appendChild(tourDiv);
                });
                messageContent.appendChild(tourContainer);
            }

            chatLi.appendChild(messageContent);
            chatbox.appendChild(chatLi);
        });
    }

    chatbox.scrollTo(0, chatbox.scrollHeight);
};

const clearChatHistory = () => {
    // Kh√¥ng c·∫ßn isHistoryCleared v√¨ saveMessage ƒë√£ ƒë∆∞·ª£c s·ª≠a
    try {
        localStorage.removeItem("chatHistory");
        if (localStorage.getItem("chatHistory") === null) {
            console.log("‚úÖ ƒê√£ x√≥a chatHistory trong localStorage");
        } else {
            console.error("‚ùå Kh√¥ng th·ªÉ x√≥a chatHistory trong localStorage");
            return;
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a chatHistory trong localStorage:", error);
        return;
    }

    const chatbox = document.querySelector(".chatbox");
    if (chatbox) {
        console.log("Tr∆∞·ªõc khi c·∫≠p nh·∫≠t chatbox:", chatbox.innerHTML);
        chatbox.innerHTML = `
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <div class="message-content">
                    <div class="text-content">
                        <p>L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!</p>
                    </div>
                </div>
            </li>
            <li class="chat incoming">
                <span class="material-symbols-outlined">smart_toy</span>
                <div class="message-content">
                    <div class="text-content">
                        <p>Xin ch√†o! T√¥i l√† chatbot du l·ªãch c·ªßa AI Tour. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm c√°c tour du l·ªãch t·∫°i Vi·ªát Nam, g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm, ·∫©m th·ª±c, ph∆∞∆°ng ti·ªán di chuy·ªÉn, v√† nhi·ªÅu h∆°n n·ªØa. B·∫°n mu·ªën kh√°m ph√° n∆°i n√†o?</p>
                    </div>
                </div>
            </li>
        `;
        console.log("Sau khi c·∫≠p nh·∫≠t chatbox:", chatbox.innerHTML);
        chatbox.scrollTo(0, chatbox.scrollHeight);
    } else {
        console.error("Kh√¥ng t√¨m th·∫•y chatbox ƒë·ªÉ x√≥a l·ªãch s·ª≠!");
    }
};

const initChatboxAfterLoad = () => {
    // X√≥a ƒëi·ªÅu ki·ªán gi·ªõi h·∫°n ch·ªâ kh·ªüi t·∫°o tr√™n index.html
    // ho·∫∑c ƒëi·ªÅu ch·ªânh ƒë·ªÉ √°p d·ª•ng cho c√°c trang mong mu·ªën
    const existingChatbot = document.querySelector(".chatbot");
    const existingToggler = document.querySelector(".chatbot-toggler");
    if (existingChatbot) existingChatbot.remove();
    if (existingToggler) existingToggler.remove();

    fetch("chatbox-component.html")
        .then((response) => {
            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ t·∫£i chatbox-component.html: ${response.status} - ${response.statusText}`);
            }
            return response.text();
        })
        .then((data) => {
            document.body.insertAdjacentHTML("beforeend", data);
            console.log("Chatbox loaded successfully");

            initializeChatbox();
            loadChatHistory();

            const clearHistoryBtn = document.querySelector(".clear-history-btn");
            if (clearHistoryBtn) {
                clearHistoryBtn.addEventListener("click", (e) => {
                    e.preventDefault();
                    clearChatHistory();
                    console.log("L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a!");
                });
            } else {
                console.warn("Kh√¥ng t√¨m th·∫•y n√∫t 'X√≥a l·ªãch s·ª≠' trong DOM sau khi ch√®n chatbox!");
            }

            const isChatbotOpen = localStorage.getItem("chatbotOpen") === "true";
            if (isChatbotOpen) {
                document.body.classList.add("show-chatbot");
            }
        })
        .catch((error) => {
            console.error("L·ªói khi ch√®n chatbox:", error);
            document.body.insertAdjacentHTML("beforeend", "<p>Kh√¥ng th·ªÉ t·∫£i khung chat. Vui l√≤ng th·ª≠ l·∫°i sau.</p>");
        });
};

document.addEventListener("DOMContentLoaded", () => {
    updateAuthUI();
    handleLogin();
    initChatboxAfterLoad();

    const paymentSuccess = localStorage.getItem("paymentSuccess");
    const lastOrderId = localStorage.getItem("lastOrderId");
    const notification = document.getElementById("notification");

    if (paymentSuccess === "true" && lastOrderId) {
        console.log(`‚úÖ Thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng ID: ${lastOrderId}`);
        if (notification) {
            notification.textContent = `B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng ID: ${lastOrderId}!`;
            notification.classList.add("show");
            setTimeout(() => {
                notification.classList.remove("show");
                localStorage.removeItem("paymentSuccess");
                localStorage.removeItem("lastOrderId");
            }, 5000);
        }
    }
});